# WORKER
# worker_processes 4;
worker_processes auto; # set nginx worker to auto
events {
    # how to limit connection for each worker
    # worker_connections 10;
}
# specify our PID PATH
# default /var/nginx/nginx.pid
# pid "dir"

# ADD MODULES
# like http2, image, etc
# include_modules /path/to/modules

http {

    # LOAD BALANCING
    # upstream is block server that we will be load balance
    # upstream servers {
    #     # load balance type: if not specify it use default: round robin
    #     # ip_hash; one ip one server if possible, but can switch
    #     # least_conn; serve by least connection server
    #     server "localhost":"port";
    #     server "localhost":"port";
    #     server "localhost":"port";
    # }

    # example of load balance implementation
    # server {
    #     listen 5000;
    #     location / {
    #         # by pass to server
    #         proxy_pass http://servers;
    #     }
    # }

    include mime.types;
    # RATE LIMITING
    # limit all request to certain request uri at rate 1r/s
    # it means that /to/url only can have load 1 request / second
    # this limit can be used in server context or location context
    limit_req_zone $request_uri zone=MYZONE:10m rate=60r/m;
    server_tokens off; # remove nginx version to caller

    server {
        listen 80; #http server
        server_name localhost;
        return 301 https://localhost$request_uri; # redirect to https call below
    }


    server{
        # HTTPS
        listen 443 ssl http2; # listen to https with ssl, you can activate http2 (optional)
        # create ssl cert and cert key by invoking this command in terminal:
        # openssl req -x509 -days 10 -nodes -newkey rsa:2048 -keyout /etc/nginx/ssl/self.key -out /etc/nginx/ssl/self.crt
        ssl_certificate /etc/nginx/ssl/self.crt; #provide ssl certificate
        ssl_certificate_key /etc/nginx/ssl/self.key; #provide ssl certificate key
        # using TLS (transport layer security), instead of SSL
        # there is alot going on, but for practical purpose it is just configuration
        # however, if you have time, deep dive to it
        # set ssl_protocol to tls
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; 
        # turn on server chipers
        ssl_prefer_server_ciphers on; 
        # set chipers suite, try to know how to generate it
        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5; 
        # specify dhparam, create dhparam by command line "openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048"
        # 2048 in above syntx must match ssl certificate command part "rsa:2048"
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;
        # enable HSTS
        add_header Strict-Transport-Security "max-age=31536000" always;
        # SSL sessions
        ssl_session_cache shared:SSL:40m;
        ssl_session_timeout 4h;
        ssl_session_tickets on;

        # listen 80; # listen to the port 80 http
        server_name localhost; # set our server ip/domain

        root /sites/demo; # set where our root resource directory

        index index.html; # entrypoint when we call /

        # TRY_FILES
        # it is an intercept logic that will check 1st argument,
        # if 1st argument file exist in root dir then return it,
        # if not, it moves to 2nd argument file, and return it if exit.
        # if not, it moves to 3rd ....
        # .....
        # remember it is an intercept, the last argumen can serve as rewrite
        # meaning it stop serving logic below it if something exist
        # try_files $uri /thumb.png /hello.txt /greet;


        # REWRITE anything that match regex to /hello
        # capture value by () to be used in rewrite url (right hand side)
        # rewrite ^/user/(\w+) /hello/$1;

        # RAME LIMIT implementation in https context
        limit_req zone=MYZONE;

        # AUTHENTICATION URL
        # auth_basic_user_file is runned by command: htpasswd -c /etc/nginx/.htpasswd "username"
        # auth_basic "Secure Area";
        # auth_basic_user_file /etc/nginx/.htpasswd;

        # REDIRECT
        location /hello {
            # implement authentication for this url
            return 307 /Hello.txt; # return 307 to return the file content, it is the standard
        }

        # LOGGING
        location = /hello/john {
            # access log is a log file that provide information about http call from user
            # you can turn off access log by "access_log off"
            access_log /testing.log; #specify access log directory for this location
            return 200 "Hello John";
        }


        # set USER DEFINED VARIABLE
        # set $weekend "No";

        # CONDITIONAL logic
        # if ( $arg_apikey != 1234 ){
        #     return 401 "incorrect api key";
        # }
        # if ( $date_local ~ 'Mon' ){
        #     set $weekend "Yes";
        # }

        # try to access /greet by returning 200 with string
        # this is PREFIX MATCH, means /greeting, /greet/ing also match, it work as a prefix
        # location /greet {
        #     return 200 'Hello World';
        # }

        # EXACT MATCH need equal sign before the path
        # using variable nginx defined ($host, $uri, $args)
        # and user defined $weekend
        location = /greet {
            return 200 "$uri\n$host\n$args\n$date_local";
        }

        # REGEX MATCH, case sensitive
        # location ~ /greet(0-9) {
        #     return 200 'Hello World';
        # }

        # REGEX MATCH, case insensitive
        # location ~* /greet(0-9) {
        #     return 200 'Hello World';
        # }

        # PREFERENTIAL MATCH, case insensitive
        # location ^~ /greet(0-9) {
        #     return 200 'Hello World';
        # }
    }
}